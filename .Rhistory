data_histo = data %>% select(pourcentage)
ratio_base_sel = 303.352/(303.352+35,453)
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cocaïne")
black_list_percent=c("NQ","NQ ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Histogramme des puretés ######################################################
################################################################################
data_histo = data %>% select(pourcentage)
ratio_base_sel = 303.352/(303.352+35.453)
ggplot(data, aes(x = pourcentage)) +
geom_histogram(binwidth = 5, fill = "firebrick2", color = "white", boundary = 0, closed = "left") +
scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
labs(
title = paste0("Distribution de la pureté de la cocaïne (en équivalent base), N=",nrow(data)),
x = "Pureté (%)",
y = "Occurence"
) +
geom_vline(xintercept = 100*ratio_base_sel, linetype="dashed")+
theme_minimal(base_size = 14)
range(0,100,5)
range(0,5,100)
range(0:5;100)
range(0:5:100)
print(range(0:5:100))
print(range(0:5))
print(range(0:100:5))
x <- c(NA, 1:3, -1:1/0); x
1:2:4
c(1:2:4)
c(1:2:)
c(1:2)
c(1:4)
c(1:20)*5
c(0:20)*5
data_histo <- data_histo %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 100, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 95, by = 5))) %>%
count(classe, name = "frequence") %>%
mutate(classe = as.integer(as.character(classe)))
data_histo
data_histo <- data_histo %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "frequence") %>%
mutate(classe = as.integer(as.character(classe)))
data_histo
data_histo <- data_histo %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 100, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 95, by = 5))) %>%
count(classe, name = "frequence") %>%
mutate(classe = as.integer(as.character(classe)))
data_histo
data_histo = data %>% select(pourcentage)
data_histo <- data_histo %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "frequence") %>%
mutate(classe = as.integer(as.character(classe)))
data_histo
data_histo <- data_histo %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe)))
data_histo <- data %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe)))
data_histo
N=sum(data_histo$occurence)
N
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cocaïne")
black_list_percent=c("NQ","NQ ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Histogramme des puretés ######################################################
################################################################################
data_histo <- data %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe)))
ratio_base_sel = 303.352/(303.352+35.453)
N=sum(data_histo$occurence)
json_obj <- list(
labels = as.character(data_histo$classe),
data_presence_coupe = data_histo$occurence,
ratio_base_sel = ratio_base_sel,
count = N
)
# Export en JSON
write_json(json_obj, "output/histo_purity_cocaine.json", pretty = TRUE, auto_unbox = FALSE)
#ggplot(data, aes(x = pourcentage)) +
#  geom_histogram(binwidth = 5, fill = "firebrick2", color = "white", boundary = 0, closed = "left") +
#  scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
#  labs(
#    title = paste0("Distribution de la pureté de la cocaïne (en équivalent base), N=",nrow(data)),
#    x = "Pureté (%)",
#    y = "Occurence"
#  ) +
#  geom_vline(xintercept = 100*ratio_base_sel, linetype="dashed")+
#  theme_minimal(base_size = 14)
data_histo
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cocaïne")
black_list_percent=c("NQ","NQ ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Evolution of the purity ######################################################
################################################################################
Delta=15
data_cocaine_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta)
#ggplot(data_cocaine_lis, aes(x = date, y = moyenne_glissante)) +
#  geom_point() +
#  geom_line() +
#  labs(x = "Date",
#       y = "Pureté de la cocaïne (équivalent base) en %",
#       title = paste0("Évolution lissée sur 1 mois de la pureté de la cocaïne, N=",nrow(data))) +
#  theme_minimal()
glimpse(data_cocaine_lis)
data_cocaine_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
glimpse(data_cocaine_lis)
################################################################################
# Evolution of the purity ######################################################
################################################################################
ratio_base_sel = 303.352/(303.352+35.453)
Delta=15
data_cocaine_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <- lapply(prod_vec, function(prod_i) {
list(
label = "",
data = data_cocaine_lis$moyenne_glissante,
fill = "false"
)
})
# Objet JSON final
json_obj <- list(
labels = as.character(data_cocaine_lis$date),
datasets = datasets_list,
ratio_base_sel = ratio_base_sel*100,
count = N
)
# Export en JSON
write_json(json_obj, "output/evol_purity_cocaine.json", pretty = TRUE, auto_unbox = FALSE)
#ggplot(data_cocaine_lis, aes(x = date, y = moyenne_glissante)) +
#  geom_point() +
#  geom_line() +
#  labs(x = "Date",
#       y = "Pureté de la cocaïne (équivalent base) en %",
#       title = paste0("Évolution lissée sur 1 mois de la pureté de la cocaïne, N=",nrow(data))) +
#  theme_minimal()
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cocaïne")
black_list_percent=c("NQ","NQ ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Evolution of the purity ######################################################
################################################################################
ratio_base_sel = 303.352/(303.352+35.453)
Delta=15
data_cocaine_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(
label = "",
data = data_cocaine_lis$moyenne_glissante,
fill = "false"
)
# Objet JSON final
json_obj <- list(
labels = as.character(data_cocaine_lis$date),
datasets = datasets_list,
ratio_base_sel = ratio_base_sel*100,
count = N
)
# Export en JSON
write_json(json_obj, "output/evol_purity_cocaine.json", pretty = TRUE, auto_unbox = FALSE)
#ggplot(data_cocaine_lis, aes(x = date, y = moyenne_glissante)) +
#  geom_point() +
#  geom_line() +
#  labs(x = "Date",
#       y = "Pureté de la cocaïne (équivalent base) en %",
#       title = paste0("Évolution lissée sur 1 mois de la pureté de la cocaïne, N=",nrow(data))) +
#  theme_minimal()
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cocaïne")
black_list_percent=c("NQ","NQ ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Evolution of the purity ######################################################
################################################################################
ratio_base_sel = 303.352/(303.352+35.453)
Delta=15
data_cocaine_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(
label = as.character(""),
data = data_cocaine_lis$moyenne_glissante,
fill = "false"
)
# Objet JSON final
json_obj <- list(
labels = as.character(data_cocaine_lis$date),
datasets = datasets_list,
ratio_base_sel = ratio_base_sel*100,
count = N
)
# Export en JSON
write_json(json_obj, "output/evol_purity_cocaine.json", pretty = TRUE, auto_unbox = FALSE)
#ggplot(data_cocaine_lis, aes(x = date, y = moyenne_glissante)) +
#  geom_point() +
#  geom_line() +
#  labs(x = "Date",
#       y = "Pureté de la cocaïne (équivalent base) en %",
#       title = paste0("Évolution lissée sur 1 mois de la pureté de la cocaïne, N=",nrow(data))) +
#  theme_minimal()
# Export en JSON
write_json(json_obj, "output/evol_purity_cocaine.json", pretty = TRUE, auto_unbox = TRUE)
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cocaïne")
black_list_percent=c("NQ","NQ ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Evolution of the purity ######################################################
################################################################################
ratio_base_sel = 303.352/(303.352+35.453)
Delta=15
data_cocaine_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(
label = "",
data = data_cocaine_lis$moyenne_glissante,
fill = "false"
)
# Objet JSON final
json_obj <- list(
labels = as.character(data_cocaine_lis$date),
datasets = datasets_list,
ratio_base_sel = ratio_base_sel*100,
count = N
)
# Export en JSON
write_json(json_obj, "output/evol_purity_cocaine.json", pretty = TRUE, auto_unbox = TRUE)
#ggplot(data_cocaine_lis, aes(x = date, y = moyenne_glissante)) +
#  geom_point() +
#  geom_line() +
#  labs(x = "Date",
#       y = "Pureté de la cocaïne (équivalent base) en %",
#       title = paste0("Évolution lissée sur 1 mois de la pureté de la cocaïne, N=",nrow(data))) +
#  theme_minimal()
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cocaïne")
black_list_percent=c("NQ","NQ ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Evolution of the purity ######################################################
################################################################################
ratio_base_sel = 303.352/(303.352+35.453)
Delta=15
data_cocaine_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(list(
label = "",
data = data_cocaine_lis$moyenne_glissante,
fill = "false"
))
# Objet JSON final
json_obj <- list(
labels = as.character(data_cocaine_lis$date),
datasets = datasets_list,
ratio_base_sel = ratio_base_sel*100,
count = N
)
# Export en JSON
write_json(json_obj, "output/evol_purity_cocaine.json", pretty = TRUE, auto_unbox = TRUE)
#ggplot(data_cocaine_lis, aes(x = date, y = moyenne_glissante)) +
#  geom_point() +
#  geom_line() +
#  labs(x = "Date",
#       y = "Pureté de la cocaïne (équivalent base) en %",
#       title = paste0("Évolution lissée sur 1 mois de la pureté de la cocaïne, N=",nrow(data))) +
#  theme_minimal()
