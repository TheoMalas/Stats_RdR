library(jsonlite)
library(purrr)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
#
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host     = "localhost",    # Ajouté si tu es en local
port     = 3306,           # Port par défaut MySQL
user = user,
password = pwd,
local_infile = 1)  # active LOAD DATA LOCAL INFILE)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse")
data = data %>% mutate(date=as.Date(date))
View(data)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
library(purrr)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
#
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host     = "localhost",    # Ajouté si tu es en local
port     = 3306,           # Port par défaut MySQL
user = user,
password = pwd,
local_infile = 1)  # active LOAD DATA LOCAL INFILE)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse")
data = data %>% mutate(date=as.Date(date))
data <- data %>%
# Randomise les autres colonnes séparément
mutate(across(c(id, identification, forme, couleur, pourcentage, comprime, date, topic_id, date_rendu, provenance), ~ sample(.x, size = length(.x), replace = TRUE)))
correct_dict <- list(
`2C-E`= c("2CE"),
`2-MMC` = c("2-MMC", "2mmc", "2MMC", "2-mmc"),
`3-MMC` = c("3-MMC", "3mmc"),
`3-MMA` = c("3MMA", "3mma", "3-MMA (cathinone)", "3-MMA","3-mma"),
`4-FMA`= c("4FMA"),
`4-MMC (mephedrone)` = c("4-MMC", "4MMC", "4-mmc"),
`6-APB` = c("6-APB", "6 APB", "6-APB Succinate"),
`Alpha-PiHP` = c("alpha pihp", "ALPHA PIHP", "Alpha PIHP", "ALPHA-PIHP","Alpha-PiHP" ),
Alprazolam = c("alprazolam", "Alprazolam"),
Baclofène = c("baclofene", "Baclofen "),
Bromazolam = c("Bromazolam", "bromazolam", "Bromazolam (comprimé écrasé)"),
Cocaïne = c("Cocaine ", "Cocaine"),
`5-MeO-DMT`= c("5-MeO-DMT Freebase", "5-meo-dmt", "5-MeO-DMT ", "5meoDMT","5-MeO-DMT Freebase "),
DMT = c("dmt"),
Kétamine = c("kétamine"),
`1-cp-LSD`= c( "1cp-LSD", "1cp-lsd", "1cp-lsd ", "1cP-LSD"),
Mescaline = c("Mescaline", "mescaline", "Mescaline "),
Méthamphétamine = c("methamphetamine", "Méthamphétamine"),
Modafinil = c("modafinil"),
Morphine = c("morphine", "Morphine", "Morphine "),
NEH = c("N-ethylHexedrone","N-Ethylhexedrone"),
Prégabaline = c("pregabaline", "prégabaline", "Prégabaline"),
`RC opioids: cychlorphine`=c("RC opioids: cyclorphine "),
sildénafil = c(" sildénafil")
)
correct_df <- bind_rows(lapply(names(correct_dict), function(nom_correct) {
data.frame(incorrect = correct_dict[[nom_correct]], correct = nom_correct, stringsAsFactors = FALSE)
}))
data_correct <- data %>%
left_join(correct_df, by = c("molecule" = "incorrect")) %>%
mutate(molecule_correct = ifelse(is.na(correct), molecule, correct)) %>%
select(-correct)
alias_dict <- list(
`2C-B` = c("TUCIBI","Tucibi"),
`2-MMC` = c("2-MMC", "2mmc", "2MMC", "2-mmc", "pas de certitude 2 mmc peut-être ?", "cathinone genre 2mmc"),
`2-Oxo-PCE` = c("o-pce"),
Alprazolam = c("alprazolam", "Alprazolam", "Xanax (Alprazolam) 2mg", "Xanax"),
Amphétamines = c("amphétamine et un élément non identifié", "Sulfate d’amphétamine ", " d-amphetamine and i-amphetamines, 3/1 ratio"),
`Cannabis (THC/CBD)` = c("cannabis (THC)", "Cannabis / Herbe", "Cannabinoïdes naturels ", "Cannabinoides naturels ", "Fleur de CBD", "résine de cannabis fort en thc, faible en cbd", "cannabis résinne-THC, CBD ,CBN", "Huile de cannabis ", "Cannabinoïdes principaux", "Cannabis CBD", "Cbd et thc ","CBD","THC","Herbe et hash"),
Codéine = c("Codéine/Paracétamol", "Moins d'un gramme de paracétamol et de la codéine"),
DMT = c("5-MeO-DMT","4-aco-dmt"),
DMXE = c("DMXE HCL","DMXE"),
Kétamine = c("Deschloroketamine (DCK)", "2-FDCK", "2FDCK", "Deschloroéthylnorkétamine","K(+nps?)"),
LSD = c("1-cp-LSD"),
MDMA = c("MDMA", "Ecstasy", "Ecstasy (MDMA)"),
Methylphénidate = c("méthylphénidate ", "4F-MPH", "4F-MPH et un élément non identifié", "Methilphenidate hydrochloride", "4-Fluoromethylphenidate"),
MiPT = c("5meomipt","5MeO mipt","Fumarate MiPT (N-méthyl-N-isopropyltryptamine)"),
Modafinil = c("FL-MODAFINIL"),
Morphine = c("Sulfate de morphine"),
NEP = c("NEP", "N-Ethylpentedrone ( NEP )", "Nep", "NEP, mais mal synthétisée, j'imagine qu'il y a des", "pentedrone","N-éthyl pentedrone","N-ethylPentedrone"),
Oxycodone = c("Oxycodone", "Oxy"),
Speed = c("speed","Speed (amphétamine)"),
Synthacaïne = c("syntacaïne","Strong Synthcaine Colombia"),
Tramadol = c("Tramadol", "tramadol hydrochloride"),
`Viagra (Sildénafil)` = c("viagra", "sildénafil"),
Problème = c("pas de la drogue","","aucun nom","ne sait pas","ne sais pas","autre élément","Un hallucinogène : ce n'est pas une molécule ça...","aucune indications","produit de coupe insoluble dans l'lsopropanol","Mélange","Coupe?","Ne sait pas","inconnu","mélange","stimulant")
)
alias_df <- bind_rows(lapply(names(alias_dict), function(nom_canonique) {
data.frame(alias = alias_dict[[nom_canonique]], canonique = nom_canonique, stringsAsFactors = FALSE)
}))
data_canonique <- data_correct %>%
left_join(alias_df, by = c("molecule_correct" = "alias")) %>%
mutate(molecule_simp = ifelse(is.na(canonique), molecule_correct, canonique)) %>%
select(-canonique)
familles_psychotropes <- list(
Amphétamines = c("Amphétamines", "Méthamphétamine", "fluoroamphetamine",
"2FMA", "2-fluoro-méthamphétamine", "4-FMA", "3FA", "Methylphénidate",
"Modafinil", "3-MMA","Fénéthylline", "Dextroamphetamine sulfate", "MDMA et Amphétamines", "Synthacaïne", "Bromantane"),
Benzodiazépines_et_similaires = c("Alprazolam", "Clonazepam", "Diazepam", "Bromazolam", "Norflurazepam", "Pyrazolam", "Flubromazepam", "Flubrotizolam", "DeschloroEtizoolam", "RC Benzo: Rilmazafone", "Gidazepam"),
Cannabinoïdes = c("Cannabis (THC/CBD)", "cannabinoïde de synthèse", "JWH-210"),
Cathinones = c("3-MMC", "2-MMC", "3-CMC", "4-MMC (mephedrone)", "4-CMC", "NEP", "Alpha-PiHP", "4BMC", "NEH","euthylone"),
Cocaïne = c("Cocaïne"),
`Crack/Freebase (cocaine base)` = c("Crack/Freebase (cocaine base)"),
Dissociatifs = c("2-Oxo-PCE", "3-MeO-PCE HCL", "DMXE", "3-HO-PCP"),
GABAergiques_non_benzo = c("GHB", "GBL"),
Hallucinogènes = c("LSD", "DMT", "5-MeO-DALT Freebase", "Mescaline", "2C-B", "2C-E", "2C-EF", "4-HO-MET", "DOB", "MiPT"),
Héroïne = c("Héroïne"),
Kétamine = c("Kétamine"),
Speed = c("Speed"),
MDMA = c("MDMA"),
Opioïdes = c("Morphine", "Codéine", "Oxycodone", "Tramadol", "méthadone","Opium", "RC opioids: cychlorphine", "RC opioids: protonitazène", "dérivé opiciacé", "Fentanyl","opioides ")
)
familles_psychotropes_df <- bind_rows(lapply(names(familles_psychotropes), function(nom_famille) {
data.frame(init = familles_psychotropes[[nom_famille]], famille = nom_famille, stringsAsFactors = FALSE)
}))
data_f <- data_canonique %>%
left_join(familles_psychotropes_df, by = c("molecule_simp" = "init"))
data_f <- data_f %>% mutate(row_id = row_number())
# Séparer les lignes à modifier et les autres
to_shuffle <- data_f %>% filter(molecule_simp=="Héroïne")
not_shuffled <- data_f %>% filter(!molecule_simp=="Héroïne")
# Tirage aléatoire d'indices
idx <- sample(nrow(to_shuffle), replace = TRUE)
# Appliquer la permutation conjointe sur col1 et col2
to_shuffle <- to_shuffle %>%
mutate(across(everything(), ~ sample(.x, size = length(.x), replace = TRUE)))
# Reconstituer le dataset et remettre dans l'ordre
data_f <- bind_rows(to_shuffle, not_shuffled) %>%
arrange(row_id) %>%
select(-row_id)
data_f <- data_f %>% mutate(row_id = row_number())
# Séparer les lignes à modifier et les autres
to_shuffle <- data_f %>% filter(molecule_simp=="Cocaïne")
not_shuffled <- data_f %>% filter(!molecule_simp=="Cocaïne")
# Tirage aléatoire d'indices
idx <- sample(nrow(to_shuffle), replace = TRUE)
# Appliquer la permutation conjointe sur col1 et col2
to_shuffle <- to_shuffle %>%
mutate(across(everything(), ~ sample(.x, size = length(.x), replace = TRUE)))
# Reconstituer le dataset et remettre dans l'ordre
data_randomized <- bind_rows(to_shuffle, not_shuffled) %>%
arrange(row_id) %>%
select(-row_id)
data_f <- data_f %>% mutate(row_id = row_number())
# Séparer les lignes à modifier et les autres
to_shuffle <- data_f %>% filter(molecule_simp=="Speed")
not_shuffled <- data_f %>% filter(!molecule_simp=="Speed")
# Tirage aléatoire d'indices
idx <- sample(nrow(to_shuffle), replace = TRUE)
# Appliquer la permutation conjointe sur col1 et col2
to_shuffle <- to_shuffle %>%
mutate(across(everything(), ~ sample(.x, size = length(.x), replace = TRUE)))
# Reconstituer le dataset et remettre dans l'ordre
data_randomized <- bind_rows(to_shuffle, not_shuffled) %>%
arrange(row_id) %>%
select(-row_id)
write.csv(data_randomized, file="/Users/theomalas-danze/Desktop/Psycho/Stats_RdR/Random_database.csv")
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
unique(data$famille)
data = data %>% filter(molecule_simp=="Cannabinoïdes")
unique(data$famille)
data = data %>% filter(famille=="Cannabinoïdes")
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(famille=="Cannabinoïdes")
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(famille=="Cannabinoïdes")
unique(data$famille)
unique(data$molecule_simp)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)")
View(data)
unique(data$pourcentage)
data = data %>% mutate(pourcentage_THC = gsub(",", ".", sub(".*THC (.*?)\\%.*", "\\1", pourcentage)))
unique(data$pourcentage_THC)
data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage_THC = gsub(",", ".", sub(".*THC (.*?)\\%.*", "\\1", pourcentage)))
unique(data$pourcentage_THC)
data = data %>% mutate(pourcentage_THC = as.numeric(gsub(",", ".", sub(".*THC (.*?)\\%.*", "\\1", pourcentage))))
unique(data$pourcentage_THC)
data = data %>% filter(! is.na(pourcentage_THC)
)
data = data %>% filter(! is.na(pourcentage_THC))
View(data)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Résine")
unique(data$pourcentage)
#data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = as.numeric(gsub(",", ".", sub(".*CBD (.*?)\\%.*", "\\1", pourcentage))))
#data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*CBD (.*?)\\%.*", "\\1", pourcentage)))
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Résine")
#data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*CBD (.*?)\\%.*", "\\1", pourcentage)))
unique(pourcentage$data)
unique(data$pourcentage)
View(data)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") #%>% filter(forme=="Résine")
#data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*CBD (.*?)\\%.*", "\\1", pourcentage)))
View(data)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Herbe")
View(data)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Herbe")
data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*THC (.*?)\\%.*", "\\1", pourcentage)))
data = data %>% filter(! is.na(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
args <- commandArgs(trailingOnly = TRUE)
date_debut <- as.Date(args[1])
date_fin <- as.Date(args[2])
data = data %>%
filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
Delta=15#as.numeric(args[3])
################################################################################
# Histogramme des puretés ######################################################
################################################################################
tranches <- tibble(classe = seq(0, 100, by = 5))
data_histo <- data %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Herbe")
data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*THC (.*?)\\%.*", "\\1", pourcentage)))
data = data %>% filter(! is.na(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
Delta=15#as.numeric(args[3])
################################################################################
# Histogramme des puretés ######################################################
################################################################################
tranches <- tibble(classe = seq(0, 100, by = 5))
data_histo <- data %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Herbe")
data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage =  as.numeric(gsub(",", ".", sub(".*THC (.*?)\\%.*", "\\1", pourcentage))))
data = data %>% filter(! is.na(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
Delta=15#as.numeric(args[3])
################################################################################
# Histogramme des puretés ######################################################
################################################################################
tranches <- tibble(classe = seq(0, 100, by = 5))
data_histo <- data %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
################################################################################
# Evolution of the purity ######################################################
################################################################################
data_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(list(
label = "",
data = data_lis$moyenne_glissante,
fill = "false"
))
################################################################################
# Export en JSON ###############################################################
################################################################################
N=sum(data_histo$occurence)
json_obj <- list(
labels = as.character(data_histo$classe),
data = data_histo$occurence,
labels_line = as.character(data_lis$date),
datasets_line = datasets_list,
count = N
)
# Export en JSON
write_json(json_obj, "output/cannabis/histo_purity_cannabis_THC_herbe.json", pretty = TRUE, auto_unbox = FALSE)
#ggplot(data, aes(x = pourcentage)) +
#  geom_histogram(binwidth = 5, fill = "firebrick2", color = "white", boundary = 0, closed = "left") +
#  scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
#  labs(
#    title = paste0("Distribution de la pureté de la cocaïne (en équivalent base), N=",nrow(data)),
#    x = "Pureté (%)",
#    y = "Occurence"
#  ) +
#  geom_vline(xintercept = 100*ratio_base_sel, linetype="dashed")+
#  theme_minimal(base_size = 14)
