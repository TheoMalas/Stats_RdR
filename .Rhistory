data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Résine")
unique(data$pourcentage)
#data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = as.numeric(gsub(",", ".", sub(".*CBD (.*?)\\%.*", "\\1", pourcentage))))
#data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*CBD (.*?)\\%.*", "\\1", pourcentage)))
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Résine")
#data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*CBD (.*?)\\%.*", "\\1", pourcentage)))
unique(pourcentage$data)
unique(data$pourcentage)
View(data)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") #%>% filter(forme=="Résine")
#data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*CBD (.*?)\\%.*", "\\1", pourcentage)))
View(data)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Herbe")
View(data)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Herbe")
data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*THC (.*?)\\%.*", "\\1", pourcentage)))
data = data %>% filter(! is.na(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
args <- commandArgs(trailingOnly = TRUE)
date_debut <- as.Date(args[1])
date_fin <- as.Date(args[2])
data = data %>%
filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
Delta=15#as.numeric(args[3])
################################################################################
# Histogramme des puretés ######################################################
################################################################################
tranches <- tibble(classe = seq(0, 100, by = 5))
data_histo <- data %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Herbe")
data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*THC (.*?)\\%.*", "\\1", pourcentage)))
data = data %>% filter(! is.na(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
Delta=15#as.numeric(args[3])
################################################################################
# Histogramme des puretés ######################################################
################################################################################
tranches <- tibble(classe = seq(0, 100, by = 5))
data_histo <- data %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cannabis (THC/CBD)") %>% filter(forme=="Herbe")
data = data %>% mutate(pourcentage = ifelse(pourcentage=="THC 46, CBD 2%, CBG 7%, CBN <1%","THC 46%, CBD 2%, CBG 7%, CBN <1%",pourcentage))
data = data %>% mutate(pourcentage =  as.numeric(gsub(",", ".", sub(".*THC (.*?)\\%.*", "\\1", pourcentage))))
data = data %>% filter(! is.na(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
Delta=15#as.numeric(args[3])
################################################################################
# Histogramme des puretés ######################################################
################################################################################
tranches <- tibble(classe = seq(0, 100, by = 5))
data_histo <- data %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
################################################################################
# Evolution of the purity ######################################################
################################################################################
data_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(list(
label = "",
data = data_lis$moyenne_glissante,
fill = "false"
))
################################################################################
# Export en JSON ###############################################################
################################################################################
N=sum(data_histo$occurence)
json_obj <- list(
labels = as.character(data_histo$classe),
data = data_histo$occurence,
labels_line = as.character(data_lis$date),
datasets_line = datasets_list,
count = N
)
# Export en JSON
write_json(json_obj, "output/cannabis/histo_purity_cannabis_THC_herbe.json", pretty = TRUE, auto_unbox = FALSE)
#ggplot(data, aes(x = pourcentage)) +
#  geom_histogram(binwidth = 5, fill = "firebrick2", color = "white", boundary = 0, closed = "left") +
#  scale_x_continuous(limits = c(0, 100), breaks = seq(0, 100, by = 10)) +
#  labs(
#    title = paste0("Distribution de la pureté de la cocaïne (en équivalent base), N=",nrow(data)),
#    x = "Pureté (%)",
#    y = "Occurence"
#  ) +
#  geom_vline(xintercept = 100*ratio_base_sel, linetype="dashed")+
#  theme_minimal(base_size = 14)
test_func <- function(fname, lname) {
paste(fname, lname)
}
test_func("Ariel","Limo")
source("../util/utilities.R")
source("scriptR/all/pie_chart_supply_all_molecules.R")
source("scriptR/util/utilities.R")
source("scriptR/util/utilities.R")
test_func("Ariel","Limo")
ls()
getwd()
source("/scriptR/util/utilities.R")
source("scriptR/util/utilities.R")
test_func("Ariel","Limo")
test_func
source("/Users/theomalas-danze/Desktop/Psycho/Stats_RdR/scriptR/util/utilities.R")
test_func
source("scriptR/util/utilities.R")
test_func
source("scriptR/util/utilities.R")
load_data()
source("scriptR/util/utilities.R")
source("scriptR/util/utilities.R")
load_data()
source("scriptR/util/utilities.R")
data = load_data()
library(dplyr)
library(jsonlite)
library(lubridate)
source("scriptR/util/utilities.R")
data = load_data()
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
################################################################################
# Pie chart sur le produit #####################################################
################################################################################
lim = 15 #nombre de produits différents sur le diagramme
df_pie <- data %>%
mutate(molecule_simp  = ifelse(molecule_simp == "Problème", "Autres",molecule_simp))
df_pie <- df_pie %>%
group_by(molecule_simp) %>%
summarise(somme = n())%>%
arrange(desc(somme)) %>%
mutate(molecule_simp = ifelse(row_number()>lim, "Autres",molecule_simp)) %>%
group_by(molecule_simp) %>%
summarise(somme = sum(somme)) %>%
arrange(desc(somme))%>%
mutate(
pourcent = somme / sum(somme) * 100,
categorie_label = paste0(molecule_simp, " (", round(pourcent, 1), "%)")
)
df_pie = df_pie %>%
mutate(temp=ifelse(molecule_simp=="Autres",-1,somme)) %>%
arrange(temp) %>%
mutate(categorie_label = factor(categorie_label, levels = categorie_label))
N=nrow(data)
df_fin = df_pie %>% select(categorie_label, pourcent)
# Convertir en liste nommée
df_list <- setNames(as.list(df_fin$pourcent), df_fin$categorie_label)
################################################################################
# Area-stacked chart ###########################################################
################################################################################
list_focus <- df_pie$molecule_simp
data_bimestre <- data %>%
mutate(
month = month(date),
bimestre = 1 + (month - 1) %/% 2,  # Diviser le mois pour obtenir un bimestre (1-2, 3-4, etc.)
date_bimestre = floor_date(date, "year") + months((bimestre - 1) * 2)  # Calculer le premier jour du bimestre
)
grille <- expand.grid(
date_bimestre = unique(data_bimestre$date_bimestre),
molecule_simp = unique(c(list_focus, "Autres"))
)
data_evol_abs <- data_bimestre %>%
mutate(molecule_simp = ifelse(molecule_simp %in% list_focus,molecule_simp,"Autres")) %>%
group_by(date_bimestre, molecule_simp) %>%
summarise(abs = n(), .groups = "drop") %>%
right_join(grille, by = c("date_bimestre", "molecule_simp")) %>%
mutate(abs = ifelse(is.na(abs), 0, abs)) %>%
arrange(date_bimestre, molecule_simp)
order=data_evol_abs %>%
filter(date_bimestre==max(date_bimestre, na.rm=T)) %>%
mutate(temp=ifelse(molecule_simp=="Autres",-1,abs)) %>%
arrange(desc(temp)) %>%
select(molecule_simp)
data_evol_abs = data_evol_abs %>% mutate(molecule_simp = factor(molecule_simp, levels = unlist(order)))
prod_vec=levels(data_evol_abs$molecule_simp)
# Génération de la liste des datasets
datasets_list <- lapply(prod_vec, function(prod_i) {
list(
label = as.character(prod_i),
data = (data_evol_abs %>% filter(molecule_simp == prod_i))$abs,
fill = "origin"
)
})
################################################################################
# Export en JSON ###############################################################
################################################################################
# Conversion au format souhaité
json_obj <- list(
labels = as.character(df_fin$categorie_label),
data = df_fin$pourcent,
labels_area = as.character(unique(data_evol_abs$date_bimestre)),
datasets_area = datasets_list,
count=N
)
# Créer les dossiers si nécessaire
dir.create("output/all", recursive = TRUE, showWarnings = FALSE)
write_json(json_obj, "output/all/pie_chart_all_molecules.json", pretty = TRUE, auto_unbox = FALSE)
#ggplot(df_pie, aes(x = "", y = somme, fill = categorie_label)) +
#  geom_col(width = 1) +
#  coord_polar(theta = "y") +
#  labs(title = paste0("Répartition des échantillons par produit (%), N=",nrow(data))) +
#  theme_void() +
#  guides(fill = guide_legend(reverse = TRUE))
#ggsave("output/pie_chart_all_molecules.png")
version
datasets_list_evol(data, Delta)
datasets_list_evol(data, Delta)
library(dplyr)
library(jsonlite)
source("scriptR/util/utilities.R")
data = load_data()
data = data %>% filter(molecule_simp=="3-MMC")
black_list_percent=c("NQ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
glimpse(data)
datasets_list_evol <- function(data, Delta){
data_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(list(
label = "",
data = data_lis$moyenne_glissante,
fill = "false"
))
labels_line = as.character(data_lis$date)
return(list(labels_line,datasets_list))
}
datasets_list_evol(data, Delta)
Delta=15#as.numeric(args[3])
datasets_list_evol(data, Delta)
# Génération de la liste des datasets
list(labels_line, datasets_list) <- datasets_list_evol(data, Delta)
datasets_list_evol <- function(data, Delta){
data_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(list(
label = "",
data = data_lis$moyenne_glissante,
fill = "false"
))
labels_line = as.character(data_lis$date)
return(list("labels_line","datasets_list"))
}
datasets_list_evol(data, Delta)
# Génération de la liste des datasets
list(labels_line, datasets_list) <- datasets_list_evol(data, Delta)
version
datasets_list_evol <- function(){
return(list("labels_line","datasets_list"))
}
# Génération de la liste des datasets
list(labels_line, datasets_list) <- datasets_list_evol()
library(dplyr)
library(jsonlite)
source("scriptR/util/utilities.R")
data = load_data()
data = data %>% filter(molecule_simp=="3-MMC")
black_list_percent=c("NQ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps #############################################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#data = filter_data(data,args)
Delta=15#as.numeric(args[3])
################################################################################
# Histogramme des puretés ######################################################
################################################################################
data_histo <- histo_data(data)
ratio_base_sel = 177.247/(177.247+35.453)
################################################################################
# Evolution of the purity ######################################################
################################################################################
datasets_list_evol <- function(data, Delta){
data_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(list(
label = "",
data = data_lis$moyenne_glissante,
fill = "false"
))
labels_line = as.character(data_lis$date)
return(list(labels_line,datasets_list))
}
# Génération de la liste des datasets
list_evol <- datasets_list_evol(data, Delta)
labels_line <- datasets[[1]]
library(dplyr)
library(jsonlite)
source("scriptR/util/utilities.R")
data = load_data()
data = data %>% filter(molecule_simp=="3-MMC")
black_list_percent=c("NQ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps #############################################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#data = filter_data(data,args)
Delta=15#as.numeric(args[3])
################################################################################
# Histogramme des puretés ######################################################
################################################################################
data_histo <- histo_data(data)
ratio_base_sel = 177.247/(177.247+35.453)
################################################################################
# Evolution of the purity ######################################################
################################################################################
datasets_list_evol <- function(data, Delta){
data_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(list(
label = "",
data = data_lis$moyenne_glissante,
fill = "false"
))
labels_line = as.character(data_lis$date)
return(list(labels_line,datasets_list))
}
# Génération de la liste des datasets
list_evol <- datasets_list_evol(data, Delta)
labels_line <- list_evol[[1]]
datasets_list <- list_evol[[2]]
reticulate::repl_python()
