cols_coupe_prod
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
library(lubridate)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Héroïne")
black_list_percent=c("NQ")
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*?(\\d+[\\.,]?\\d*)%.*", "\\1", pourcentage)))
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
args <- commandArgs(trailingOnly = TRUE)
date_debut <- as.Date(args[1])
date_fin <- as.Date(args[2])
data = data %>%
filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Histogramme des produits de coupe ############################################
################################################################################
# Premier pie chart sur la présence de produit de coupe
data_presence_coupe = data %>% select(presencecoupe) %>%
filter(presencecoupe==0 | presencecoupe==1) %>%
mutate(presencecoupe = ifelse(presencecoupe==1, "Produit(s) de coupe détecté(s)","Pas de produit de coupe détecté"))
df_pie_presence_coupe <- data_presence_coupe %>%
group_by(presencecoupe) %>%
summarise(somme = n()) %>%
mutate(
pourcent = somme / sum(somme) * 100,
categorie_label = paste0(presencecoupe, " (", round(pourcent, 1), "%)")
) %>%
arrange(desc(categorie_label)) %>%
mutate(categorie_label = factor(categorie_label, levels = categorie_label))
df_fin_presence_coupe = df_pie_presence_coupe %>% select(categorie_label, pourcent)
################################################################################
# Second chart: histogramme avec barres à l'horizontale, une ligne par produit de coupe, rangé par ordre décroissant
liste_prod_coupe = c("paracetamol","X6MAM","cafeine","papaverine","dextrometorphane")
data_coupe = data %>% filter(presencecoupe==1) %>%  select(all_of(liste_prod_coupe),date)
pourcentage_non_nuls <- data.frame(
prod = character(),
pourcentage_non_nuls = numeric()
)
for (col in names(data_coupe)) {
vec <- data_coupe[[col]]
if (is.numeric(vec)) {
pourcentage <- mean(vec != 0, na.rm = TRUE) * 100
pourcentage_non_nuls <- rbind(pourcentage_non_nuls,
data.frame(prod = col,
pourcentage_non_nul = round(pourcentage, 2)))
}
}
# Tri décroissant
pourcentage_non_nuls <- pourcentage_non_nuls %>%
arrange(desc(pourcentage_non_nul))
################################################################################################################
data_bimestre <- data_coupe %>%
mutate(
month = month(date),
bimestre = 1 + (month - 1) %/% 2,  # Diviser le mois pour obtenir un bimestre (1-2, 3-4, etc.)
date_bimestre = floor_date(date, "year") + months((bimestre - 1) * 2)  # Calculer le premier jour du bimestre
)
cols_coupe_prod <- setdiff(names(data_bimestre), c("date", "date_bimestre", "month", "bimestre"))
# Étape 2 : Boucle pour chaque nom
evol_coupe <- lapply(cols_coupe_prod, function(coupe_prod) {
data_bimestre %>%
group_by(date_bimestre) %>%
summarise(
total_dates = n_distinct(date),
dates_present = sum(!!sym(coupe_prod) > 0, na.rm = TRUE),
pourcentage_presence = 100 * dates_present / total_dates,
coupe_prod = coupe_prod,
.groups = "drop"
)
}) %>%
bind_rows()
order=evol_coupe %>%
filter(date_bimestre==max(date_bimestre, na.rm=T)) %>%
arrange(desc(pourcentage_presence)) %>%
select(coupe_prod)
evol_coupe <- evol_coupe %>%
mutate(coupe_prod = factor(coupe_prod, levels = unlist(order)))
prod_vec=levels(evol_coupe$coupe_prod)
# Génération de la liste des datasets
datasets_list <- lapply(prod_vec, function(prod_i) {
list(
label = as.character(prod_i),
data = (evol_coupe %>% filter(coupe_prod == prod_i))$pourcentage_presence,
fill = "origin"
)
})
################################################################################
N=nrow(data)
# Conversion au format souhaité
json_obj <- list(
labels_presence_coupe = as.character(df_fin_presence_coupe$categorie_label),
data_presence_coupe = df_fin_presence_coupe$pourcent,
labels_prod_coupe = as.character(pourcentage_non_nuls$prod),
data_prod_coupe = pourcentage_non_nuls$pourcentage_non_nul,
labels_area = as.character(unique(evol_coupe$date_bimestre)),
datasets_area = datasets_list,
count = N
)
# Export en JSON
write_json(json_obj, "output/heroine/coupe_heroine.json", pretty = TRUE, auto_unbox = FALSE)
cols_coupe_prod
glimpse(evol_coupe)
glimpse(data_bimestre)
glimpse(data)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
library(lubridate)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Héroïne")
black_list_percent=c("NQ")
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*?(\\d+[\\.,]?\\d*)%.*", "\\1", pourcentage)))
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
glimpse(data)
args <- commandArgs(trailingOnly = TRUE)
date_debut <- as.Date(args[1])
date_fin <- as.Date(args[2])
data = data %>%
filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
glimpse(data)
date_debut
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
library(lubridate)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Héroïne")
black_list_percent=c("NQ")
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*?(\\d+[\\.,]?\\d*)%.*", "\\1", pourcentage)))
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Histogramme des produits de coupe ############################################
################################################################################
# Premier pie chart sur la présence de produit de coupe
data_presence_coupe = data %>% select(presencecoupe) %>%
filter(presencecoupe==0 | presencecoupe==1) %>%
mutate(presencecoupe = ifelse(presencecoupe==1, "Produit(s) de coupe détecté(s)","Pas de produit de coupe détecté"))
df_pie_presence_coupe <- data_presence_coupe %>%
group_by(presencecoupe) %>%
summarise(somme = n()) %>%
mutate(
pourcent = somme / sum(somme) * 100,
categorie_label = paste0(presencecoupe, " (", round(pourcent, 1), "%)")
) %>%
arrange(desc(categorie_label)) %>%
mutate(categorie_label = factor(categorie_label, levels = categorie_label))
df_fin_presence_coupe = df_pie_presence_coupe %>% select(categorie_label, pourcent)
################################################################################
# Second chart: histogramme avec barres à l'horizontale, une ligne par produit de coupe, rangé par ordre décroissant
liste_prod_coupe = c("paracetamol","X6MAM","cafeine","papaverine","dextrometorphane")
data_coupe = data %>% filter(presencecoupe==1) %>%  select(all_of(liste_prod_coupe),date)
pourcentage_non_nuls <- data.frame(
prod = character(),
pourcentage_non_nuls = numeric()
)
for (col in names(data_coupe)) {
vec <- data_coupe[[col]]
if (is.numeric(vec)) {
pourcentage <- mean(vec != 0, na.rm = TRUE) * 100
pourcentage_non_nuls <- rbind(pourcentage_non_nuls,
data.frame(prod = col,
pourcentage_non_nul = round(pourcentage, 2)))
}
}
# Tri décroissant
pourcentage_non_nuls <- pourcentage_non_nuls %>%
arrange(desc(pourcentage_non_nul))
################################################################################################################
data_bimestre <- data_coupe %>%
mutate(
month = month(date),
bimestre = 1 + (month - 1) %/% 2,  # Diviser le mois pour obtenir un bimestre (1-2, 3-4, etc.)
date_bimestre = floor_date(date, "year") + months((bimestre - 1) * 2)  # Calculer le premier jour du bimestre
)
cols_coupe_prod <- setdiff(names(data_bimestre), c("date", "date_bimestre", "month", "bimestre"))
# Étape 2 : Boucle pour chaque nom
evol_coupe <- lapply(cols_coupe_prod, function(coupe_prod) {
data_bimestre %>%
group_by(date_bimestre) %>%
summarise(
total_dates = n_distinct(date),
dates_present = sum(!!sym(coupe_prod) > 0, na.rm = TRUE),
pourcentage_presence = 100 * dates_present / total_dates,
coupe_prod = coupe_prod,
.groups = "drop"
)
}) %>%
bind_rows()
order=evol_coupe %>%
filter(date_bimestre==max(date_bimestre, na.rm=T)) %>%
arrange(desc(pourcentage_presence)) %>%
select(coupe_prod)
evol_coupe <- evol_coupe %>%
mutate(coupe_prod = factor(coupe_prod, levels = unlist(order)))
prod_vec=levels(evol_coupe$coupe_prod)
# Génération de la liste des datasets
datasets_list <- lapply(prod_vec, function(prod_i) {
list(
label = as.character(prod_i),
data = (evol_coupe %>% filter(coupe_prod == prod_i))$pourcentage_presence,
fill = "origin"
)
})
################################################################################
N=nrow(data)
# Conversion au format souhaité
json_obj <- list(
labels_presence_coupe = as.character(df_fin_presence_coupe$categorie_label),
data_presence_coupe = df_fin_presence_coupe$pourcent,
labels_prod_coupe = as.character(pourcentage_non_nuls$prod),
data_prod_coupe = pourcentage_non_nuls$pourcentage_non_nul,
labels_area = as.character(unique(evol_coupe$date_bimestre)),
datasets_area = datasets_list,
count = N
)
# Export en JSON
write_json(json_obj, "output/heroine/coupe_heroine.json", pretty = TRUE, auto_unbox = FALSE)
order
source("~/Desktop/Psycho/Stats_RdR/scriptR/heroine/histo_purity_heroine.R", echo=TRUE)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Héroïne")
black_list_percent=c("NQ","NQ ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Héroïne")
black_list_percent=c("NQ")
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*?(\\d+[\\.,]?\\d*)%.*", "\\1", pourcentage)))
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Héroïne")
black_list_percent=c("NQ")
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*?(\\d+[\\.,]?\\d*)%.*", "\\1", pourcentage)))
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
View(data$pourcentage)
View(data %>% select(date,molecule_simp,pourcentage))
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="MDMA")
unique(data$pourcentage)
unique(data$forme)
data = data %>% filter(molecule_simp=="MDMA", (forme="Cristal" | forme="Poudre"))
data = data %>% filter(molecule_simp=="MDMA", (forme=="Cristal" | forme=="Poudre"))
unique(data$pourcentage)
data$pourcentage
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
ratio_base_sel = 193.242/(193.242+35.453)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="3-MMC")
unique(data$pourcentage)
black_list_percent=c("NQ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
unique(data$pourcentage)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Kétamine")
unique(data$pourcentage)
black_list_percent=c("NQ","deschlorokétamine","2-FDCK","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
unique(data$pourcentage)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Speed")
unique(data$pourcentage)
unique(data$forme)
data = data %>% mutate(pourcentage = gsub(",", ".", sub(".*?(\\d+[\\.,]?\\d*)%.*", "\\1", pourcentage)))
unique(data$pourcentage)
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
unique(data$pourcentage)
N
################################################################################
# Export en JSON ###############################################################
################################################################################
N=sum(data_histo$occurence)
N
Delta
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Kétamine")
black_list_percent=c("NQ","deschlorokétamine","2-FDCK","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
tranches <- tibble(classe = seq(0, 100, by = 5))
data_histo <- data %>%
select(pourcentage) %>%
mutate(classe = cut(pourcentage,
breaks = seq(0, 105, by = 5),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, 100, by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
ratio_base_sel = 237.725/(237.725+35.453)
################################################################################
# Evolution of the purity ######################################################
################################################################################
data_lis <- data %>%
arrange(date) %>%
mutate(moyenne_glissante = sapply(date, function(d) {
mean(pourcentage[date >= d - Delta & date <= d + Delta], na.rm = TRUE)
}))%>%
filter(date >= min(date) + Delta, date <= max(date) - Delta) %>%
select(date,moyenne_glissante)
# Génération de la liste des datasets
datasets_list <-list(list(
label = "",
data = data_lis$moyenne_glissante,
fill = "false"
))
################################################################################
# Export en JSON ###############################################################
################################################################################
N=sum(data_histo$occurence)
json_obj <- list(
labels = as.character(data_histo$classe),
data = data_histo$occurence,
labels_line = as.character(data_lis$date),
datasets_line = datasets_list,
ratio_base_sel = ratio_base_sel*100,
count = N
)
# Export en JSON
write_json(json_obj, "output/ketamine/histo_purity_ketamine.json", pretty = TRUE, auto_unbox = FALSE)
N
