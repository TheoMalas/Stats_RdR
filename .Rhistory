}
sapply(text, extract_number)
text = "MDMA 17.78% équivalent base soit 21.1% équivalent  chlorhydrate (95.2 mg de MDMA dans un comprimé de 450 mg) + 2C-B 0.87% équivalent base soit 1% équivalent chlorhydrate (4.5 mg de 2C-B dans le comprimé) Nos résultats sont rendus avec une marge d'incertitude de +/- 10%"
sapply(text, extract_number)
text = "MDMA 17.78% équivalent base soit 21.1% équivalent  chlorhydrate (95,2 mg de MDMA dans un comprimé de 450 mg) + 2C-B 0.87% équivalent base soit 1% équivalent chlorhydrate (4.5 mg de 2C-B dans le comprimé) Nos résultats sont rendus avec une marge d'incertitude de +/- 10%"
sapply(text, extract_number)
data_comprime = data_comprime %>% mutate(dose = sapply(coupe, extract_number))
head(data_comprime)
View(data_comprime)
data_comprime = data_comprime %>% mutate(dose = as.numeric(dose))
View(data_comprime)
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date)
data_comprime = data_comprime %>% mutate(dose = sapply(coupe, extract_number))
View(data_comprime)
extract_number <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mg.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime = data_comprime %>% mutate(dose = sapply(coupe, extract_number))
View(data_comprime)
library(DBI)
library(RMySQL)
library(tidyr)
library(jsonlite)
library(lubridate)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% filter(molecule_simp=="MDMA") %>% mutate(date=as.Date(date))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
# args <- commandArgs(trailingOnly = TRUE)
#
# date_debut <- as.Date(args[1])
# date_fin <- as.Date(args[2])
# data = data %>%
#   filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
#
# if (length(args)>2){
#   familles_vec <- args[3:length(args)]  # vecteur de familles
#   data = data %>% filter(famille %in% familles_vec)
# }
################################################################################
# Histogramme des dosages de comprimés #########################################
################################################################################
extract_number <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mg.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number))
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number)) %>%
filter(! is.na(dose))
glimpse(data_comprime)
data_histo <- data_comprime %>%
select(dose) %>%
mutate(classe = cut(dose,
breaks = seq(0, max(dose)+10, by = 10),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, max(dose), by = 5))) %>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
data_histo <- data_comprime %>%
select(dose) %>%
mutate(classe = cut(dose,
breaks = seq(0, max(dose)+10, by = 10),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, max(dose), by = 5)))
data_histo <- data_comprime %>%
select(dose) %>%
mutate(classe = cut(dose,
breaks = seq(0, max(dose)+10, by = 10),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, max(dose), by = 10)))
data_histo <- data_comprime %>%
select(dose) %>%
mutate(classe = cut(dose,
breaks = seq(0, max(dose)+10, by = 10),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, max(dose), by = 10)))%>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
View(data_histo)
max_dose=max(data_comprime$dose)
data_histo <- data_comprime %>%
select(dose) %>%
mutate(classe = cut(dose,
breaks = seq(0, max_dose+10, by = 10),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, max_dose, by = 10)))%>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
View(data_histo)
max_dose
seq(0, max_dose+10, by = 10)
data_histo <- data_comprime %>%
select(dose) %>%
mutate(classe = cut(dose,
breaks = seq(0, max_dose+10, by = 10),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(0, max_dose, by = 10)))
View(data_histo)
library(DBI)
library(RMySQL)
library(tidyr)
library(jsonlite)
library(lubridate)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% filter(molecule_simp=="MDMA") %>% mutate(date=as.Date(date))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
# args <- commandArgs(trailingOnly = TRUE)
#
# date_debut <- as.Date(args[1])
# date_fin <- as.Date(args[2])
# data = data %>%
#   filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
#
# if (length(args)>2){
#   familles_vec <- args[3:length(args)]  # vecteur de familles
#   data = data %>% filter(famille %in% familles_vec)
# }
################################################################################
# Histogramme des dosages de comprimés #########################################
################################################################################
extract_number <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mg.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number)) %>%
filter(! is.na(dose))
min_dose=0
max_dose=max(data_comprime$dose)
step=10
tranches <- tibble(classe = seq(min_dose, max_dose, by = step))
data_histo <- data_comprime %>%
select(dose) %>%
mutate(classe = cut(dose,
breaks = seq(min_dose, max_dose+step, by = step),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(min_dose, max_dose, by = step)))%>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
View(data_histo)
library(DBI)
library(RMySQL)
library(tidyr)
library(jsonlite)
library(lubridate)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% filter(molecule_simp=="MDMA") %>% mutate(date=as.Date(date))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
# args <- commandArgs(trailingOnly = TRUE)
#
# date_debut <- as.Date(args[1])
# date_fin <- as.Date(args[2])
# data = data %>%
#   filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
#
# if (length(args)>2){
#   familles_vec <- args[3:length(args)]  # vecteur de familles
#   data = data %>% filter(famille %in% familles_vec)
# }
################################################################################
# Histogramme des dosages de comprimés #########################################
################################################################################
extract_number <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mg.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number)) %>%
filter(! is.na(dose))
min_dose=0
max_dose=max(data_comprime$dose)
step=20
tranches <- tibble(classe = seq(min_dose, max_dose, by = step))
data_histo <- data_comprime %>%
select(dose) %>%
mutate(classe = cut(dose,
breaks = seq(min_dose, max_dose+step, by = step),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(min_dose, max_dose, by = step)))%>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
View(data_histo)
library(DBI)
library(RMySQL)
library(tidyr)
library(jsonlite)
library(lubridate)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% filter(molecule_simp=="MDMA") %>% mutate(date=as.Date(date))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
# args <- commandArgs(trailingOnly = TRUE)
#
# date_debut <- as.Date(args[1])
# date_fin <- as.Date(args[2])
# data = data %>%
#    filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
#
################################################################################
# Histogramme des dosages de comprimés #########################################
################################################################################
extract_number <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mg.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number)) %>%
filter(! is.na(dose))
min_dose=0
max_dose=max(data_comprime$dose)
step=20
tranches <- tibble(classe = seq(min_dose, max_dose, by = step))
data_histo <- data_comprime %>%
select(dose) %>%
mutate(classe = cut(dose,
breaks = seq(min_dose, max_dose+step, by = step),
include.lowest = TRUE,
right = FALSE,  # [x, y[
labels = seq(min_dose, max_dose, by = step)))%>%
count(classe, name = "occurence") %>%
mutate(classe = as.integer(as.character(classe))) %>%
right_join(tranches, by = "classe") %>%
mutate(occurence = ifelse(is.na(occurence), 0, occurence)) %>%
arrange(classe)
################################################################################
# Export en JSON ###############################################################
################################################################################
N=sum(data_histo$occurence)
json_obj <- list(
labels = as.character(data_histo$classe),
data = data_histo$occurence,
count = N
)
write_json(json_obj, "output/histo_comprime_mdma.json", pretty = TRUE, auto_unbox = FALSE)
library(DBI)
library(RMySQL)
library(dplyr)
library(jsonlite)
library(lubridate)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
host <- Sys.getenv("HOST")
port <- as.integer(Sys.getenv("PORT"))
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = host,
port = port,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% filter(molecule_simp=="MDMA") %>% mutate(date=as.Date(date))
extract_number <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mg.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number)) %>%
filter(! is.na(dose))
View(data_comprime)
extract_number <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mgdeMDMA.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number)) %>%
filter(! is.na(dose))
View(data_comprime)
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number))
View(data_comprime)
View(data_comprime %>% filter(is.na(dose)))
data_comprime_2 = data_comprime %>% filter( is.na(dose)) %>% mutate(dose=sapply(coupe, extract_number_2))
extract_number_2 <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mgMDMA/.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime_2 = data_comprime %>% filter( is.na(dose)) %>% mutate(dose=sapply(coupe, extract_number_2))
data = data %>% filter(grepl("mg", coupe))
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number))
data_comprime_2 = data_comprime %>% filter( is.na(dose)) %>% mutate(dose=sapply(coupe, extract_number_2))
View(data_comprime %>% filter(is.na(dose)))
View(data_comprime_2 %>% filter(is.na(dose)))
extract_number_3 <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mgeqbase/.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime_3 = data_comprime_2 %>% filter( is.na(dose)) %>% mutate(dose=sapply(coupe, extract_number_3))
View(data_comprime_3 %>% filter(is.na(dose)))
data = data %>% filter(grepl("mg", coupe))
extract_number <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mgdeMDMA.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
extract_number_2 <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mgMDMA/.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
extract_number_3 <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mgeqbase/.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number))
data_comprime_2 = data_comprime %>% filter( is.na(dose)) %>% mutate(dose=sapply(coupe, extract_number_2))
data_comprime_3 = data_comprime_2 %>% filter( is.na(dose)) %>% mutate(dose=sapply(coupe, extract_number_3))
View(data_comprime_3 %>% filter(is.na(dose)))
View(data_comprime_2 %>% filter(is.na(dose)))
text="Nous détectons de la MDMA à hauteur de 46,2% équivalent HCl. Le comprimé pèse 446,4mg 173mg eq base ou 206mg eq HCl par comprimé Incertitude sur les teneurs +/-10%"
extract_number_3(text)
text_clean=gsub("\\s+", "", text)
sub(".*?(\\d+[\\.,]?\\d*)mgeqbase/.*", "\\1", text_clean)
extract_number_3 <- function(x) {
# Enlever espaces inutiles autour du nombre et mg
x_clean <- gsub("\\s+", "", x)
# Extraire nombre avec virgule ou point avant mg
res <- sub(".*?(\\d+[\\.,]?\\d*)mgeqbase.*", "\\1", x_clean)
# Optionnel : remplacer virgule par point pour convertir en numérique
res <- gsub(",", ".", res)
return(as.numeric(res))
}
data_comprime_3 = data_comprime_2 %>% filter( is.na(dose)) %>% mutate(dose=sapply(coupe, extract_number_3))
View(data_comprime_3 %>% filter(is.na(dose)))
View(data_comprime)
extract_number_combined <- function(x) {
x_clean <- gsub("\\s+", "", x)  # Supprimer tous les espaces
# Liste des regex à tester
patterns <- c(
".*?(\\d+[\\.,]?\\d*)mgdeMDMA.*",
".*?(\\d+[\\.,]?\\d*)mgMDMA/.*",
".*?(\\d+[\\.,]?\\d*)mgeqbase.*"
)
for (pattern in patterns) {
match <- sub(pattern, "\\1", x_clean)
match <- gsub(",", ".", match)
if (!is.na(suppressWarnings(as.numeric(match)))) {
return(as.numeric(match))
}
}
return(NA_real_)  # Aucun motif trouvé
}
data_comprime = data %>%
filter(forme=="comprimé") %>%
select(coupe, date) %>%
mutate(dose = sapply(coupe, extract_number_combined))
View(data_comprime %>% filter(is.na(dose)))
max(data_comprime$dose)
max(data_comprime$dose, na.rm=TRUE)
