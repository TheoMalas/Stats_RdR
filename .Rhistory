dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
data = data %>% filter(molecule_simp=="Cocaïne")
black_list_percent=c("NQ","NQ ","")
data = data %>% filter(!pourcentage %in% black_list_percent) %>% mutate(pourcentage = as.double(pourcentage))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
################################################################################
# Histogramme des produits de coupe ############################################
################################################################################
# Premier pie chart sur la présence de produit de coupe
data_presence_coupe = data %>% select(presencecoupe) %>%
filter(presencecoupe==0 | presencecoupe==1) %>%
mutate(presencecoupe = ifelse(presencecoupe==1, "Produit(s) de coupe détecté(s)","Pas de produit de coupe détecté"))
df_pie_presence_coupe <- data_presence_coupe %>%
group_by(presencecoupe) %>%
summarise(somme = n()) %>%
mutate(
pourcent = somme / sum(somme) * 100,
categorie_label = paste0(presencecoupe, " (", round(pourcent, 1), "%)")
) %>%
arrange(somme) %>%
mutate(categorie_label = factor(categorie_label, levels = categorie_label))
df_fin_presence_coupe = df_pie_presence_coupe %>% select(categorie_label, pourcent)
################################################################################
# Second chart: histogramme avec barres à l'horizontale, une ligne par produit de coupe, rangé par ordre décroissant
liste_prod_coupe = c("paracetamol","cafeine","levamisole","phenacetine","hydroxyzine", "lidocaine","procaine")
data_coupe = data %>% filter(presencecoupe==1) %>%  select(all_of(liste_prod_coupe))
pourcentage_non_nuls <- data.frame(
prod = character(),
pourcentage_non_nuls = numeric()
)
for (col in names(data_coupe)) {
vec <- data_coupe[[col]]
if (is.numeric(vec)) {
pourcentage <- mean(vec != 0, na.rm = TRUE) * 100
pourcentage_non_nuls <- rbind(pourcentage_non_nuls,
data.frame(prod = col,
pourcentage_non_nul = round(pourcentage, 2)))
}
}
# Tri décroissant
pourcentage_non_nuls <- pourcentage_non_nuls %>%
arrange(desc(pourcentage_non_nul))
################################################################################
# Conversion au format souhaité
json_obj <- list(
labels_presence_coupe = as.character(df_fin_presence_coupe$categorie_label),
data_presence_coupe = df_fin_presence_coupe$pourcent,
labels_prod_coupe = as.character(pourcentage_non_nuls$prod),
data_prod_coupe = pourcentage_non_nuls$pourcentage_non_nul
)
# Export en JSON
write_json(json_obj, "output/coupe_cocaine.json", pretty = TRUE, auto_unbox = FALSE)
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
#if (length(args)>2){
#  familles_vec <- args[3:length(args)]  # vecteur de familles
#  data = data %>% filter(famille %in% familles_vec)
#}
################################################################################
# Évolution des pourcentages ###################################################
################################################################################
lim = 15 #nombre de produits différents sur le diagramme
df_focus <- data %>%
mutate(molecule_simp = ifelse(molecule_simp == "Problème", "Autres", molecule_simp)) %>%
count(molecule_simp, name = "somme") %>%
arrange(desc(somme)) %>%
mutate(molecule_simp = ifelse(row_number() > lim, "Autres", molecule_simp)) %>%
group_by(molecule_simp) %>%
summarise(somme = sum(somme), .groups = "drop") %>%
arrange(desc(somme)) %>%
mutate(
pourcent = somme / sum(somme) * 100,
categorie_label = paste0(molecule_simp, " (", round(pourcent, 1), "%)")
)
list_focus <- df_focus$molecule_simp
data_bimestre <- data %>%
mutate(
month = month(date),
bimestre = 1 + (month - 1) %/% 2,  # Diviser le mois pour obtenir un bimestre (1-2, 3-4, etc.)
date_bimestre = floor_date(date, "year") + months((bimestre - 1) * 2)  # Calculer le premier jour du bimestre
)
data_evol <- data_bimestre %>%
mutate(molecule_simp = ifelse(molecule_simp %in% list_focus,molecule_simp,"Autres")) %>%
group_by(date_bimestre) %>%
mutate(n_total = n()) %>%
ungroup() %>%
group_by(date_bimestre, molecule_simp) %>%
summarise(prop = n() / first(n_total), .groups = "drop") %>%
complete(date_bimestre, molecule_simp, fill = list(prop = 0)) %>%
arrange(date_bimestre, molecule_simp) %>%
filter(date_bimestre > "2023-04-01" & date_bimestre < max(date_bimestre, na.rm=T))
order=data_evol %>%
filter(date_bimestre==max(date_bimestre, na.rm=T)) %>%
mutate(temp=ifelse(molecule_simp=="Autres",-1,prop)) %>%
arrange(temp) %>%
select(molecule_simp)
data_evol <- data_evol %>%
mutate(molecule_simp = factor(molecule_simp, levels = unlist(order)))
N=nrow(data_bimestre %>% filter(date_bimestre > "2023-04-01" & date_bimestre < max(date_bimestre, na.rm=T)))
#ggplot(data_evol, aes(x = date_bimestre, y = prop, fill = molecule_simp)) +
#  geom_area(position = "stack", color = "white", size = 0.2) +
#  scale_y_continuous(labels = scales::percent_format()) +
#  labs(
#    title = paste0("Évolution des parts par produit attendu, N=",N),
#    x = "Bimestre",
#    y = "Part relative",
#    fill = "Produit attendu"
#  ) +
#  theme_minimal(base_size = 14)
#ggsave("stacked_area_prop.pdf")
view(data_evol)
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
#if (length(args)>2){
#  familles_vec <- args[3:length(args)]  # vecteur de familles
#  data = data %>% filter(famille %in% familles_vec)
#}
################################################################################
# Évolution des pourcentages ###################################################
################################################################################
lim = 15 #nombre de produits différents sur le diagramme
df_focus <- data %>%
mutate(molecule_simp = ifelse(molecule_simp == "Problème", "Autres", molecule_simp)) %>%
count(molecule_simp, name = "somme") %>%
arrange(desc(somme)) %>%
mutate(molecule_simp = ifelse(row_number() > lim, "Autres", molecule_simp)) %>%
group_by(molecule_simp) %>%
summarise(somme = sum(somme), .groups = "drop") %>%
arrange(desc(somme)) %>%
mutate(
pourcent = somme / sum(somme) * 100,
categorie_label = paste0(molecule_simp, " (", round(pourcent, 1), "%)")
)
list_focus <- df_focus$molecule_simp
data_bimestre <- data %>%
mutate(
month = month(date),
bimestre = 1 + (month - 1) %/% 2,  # Diviser le mois pour obtenir un bimestre (1-2, 3-4, etc.)
date_bimestre = floor_date(date, "year") + months((bimestre - 1) * 2)  # Calculer le premier jour du bimestre
)
data_evol <- data_bimestre %>%
mutate(molecule_simp = ifelse(molecule_simp %in% list_focus,molecule_simp,"Autres")) %>%
group_by(date_bimestre) %>%
mutate(n_total = n()) %>%
ungroup() %>%
group_by(date_bimestre, molecule_simp) %>%
summarise(prop = n() / first(n_total), .groups = "drop") %>%
complete(date_bimestre, molecule_simp, fill = list(prop = 0)) %>%
arrange(date_bimestre, molecule_simp)
order=data_evol %>%
filter(date_bimestre==max(date_bimestre, na.rm=T)) %>%
mutate(temp=ifelse(molecule_simp=="Autres",-1,prop)) %>%
arrange(temp) %>%
select(molecule_simp)
data_evol <- data_evol %>%
mutate(molecule_simp = factor(molecule_simp, levels = unlist(order)))
N=nrow(data)
# Conversion au format souhaité
json_obj <- list(
labels = as.character(df_fin$categorie_label),
data = df_fin$pourcent,
count=N
)
#ggplot(data_evol, aes(x = date_bimestre, y = prop, fill = molecule_simp)) +
#  geom_area(position = "stack", color = "white", size = 0.2) +
#  scale_y_continuous(labels = scales::percent_format()) +
#  labs(
#    title = paste0("Évolution des parts par produit attendu, N=",N),
#    x = "Bimestre",
#    y = "Part relative",
#    fill = "Produit attendu"
#  ) +
#  theme_minimal(base_size = 14)
#ggsave("stacked_area_prop.pdf")
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
#if (length(args)>2){
#  familles_vec <- args[3:length(args)]  # vecteur de familles
#  data = data %>% filter(famille %in% familles_vec)
#}
################################################################################
# Évolution des pourcentages ###################################################
################################################################################
lim = 15 #nombre de produits différents sur le diagramme
df_focus <- data %>%
mutate(molecule_simp = ifelse(molecule_simp == "Problème", "Autres", molecule_simp)) %>%
count(molecule_simp, name = "somme") %>%
arrange(desc(somme)) %>%
mutate(molecule_simp = ifelse(row_number() > lim, "Autres", molecule_simp)) %>%
group_by(molecule_simp) %>%
summarise(somme = sum(somme), .groups = "drop") %>%
arrange(desc(somme)) %>%
mutate(
pourcent = somme / sum(somme) * 100,
categorie_label = paste0(molecule_simp, " (", round(pourcent, 1), "%)")
)
list_focus <- df_focus$molecule_simp
data_bimestre <- data %>%
mutate(
month = month(date),
bimestre = 1 + (month - 1) %/% 2,  # Diviser le mois pour obtenir un bimestre (1-2, 3-4, etc.)
date_bimestre = floor_date(date, "year") + months((bimestre - 1) * 2)  # Calculer le premier jour du bimestre
)
data_evol <- data_bimestre %>%
mutate(molecule_simp = ifelse(molecule_simp %in% list_focus,molecule_simp,"Autres")) %>%
group_by(date_bimestre) %>%
mutate(n_total = n()) %>%
ungroup() %>%
group_by(date_bimestre, molecule_simp) %>%
summarise(prop = n() / first(n_total), .groups = "drop") %>%
complete(date_bimestre, molecule_simp, fill = list(prop = 0)) %>%
arrange(date_bimestre, molecule_simp)
order=data_evol %>%
filter(date_bimestre==max(date_bimestre, na.rm=T)) %>%
mutate(temp=ifelse(molecule_simp=="Autres",-1,prop)) %>%
arrange(temp) %>%
select(molecule_simp)
data_evol <- data_evol %>%
mutate(molecule_simp = factor(molecule_simp, levels = unlist(order)))
N=nrow(data)
# Conversion au format souhaité
json_obj <- list(
labels = as.character(df_fin$categorie_label),
data = df_fin$pourcent,
count=N
)
#ggplot(data_evol, aes(x = date_bimestre, y = prop, fill = molecule_simp)) +
#  geom_area(position = "stack", color = "white", size = 0.2) +
#  scale_y_continuous(labels = scales::percent_format()) +
#  labs(
#    title = paste0("Évolution des parts par produit attendu, N=",N),
#    x = "Bimestre",
#    y = "Part relative",
#    fill = "Produit attendu"
#  ) +
#  theme_minimal(base_size = 14)
#ggsave("stacked_area_prop.pdf")
glimpse(data_evol)
# Conversion au format souhaité
json_obj <- list(
labels = as.character(unique(data_evol$date_bimestre)),
data = df_fin$pourcent,
count=N
)
prod_vec=unique(data_evol$molecule_simp)
prod_vec
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
#if (length(args)>2){
#  familles_vec <- args[3:length(args)]  # vecteur de familles
#  data = data %>% filter(famille %in% familles_vec)
#}
################################################################################
# Évolution des pourcentages ###################################################
################################################################################
lim = 15 #nombre de produits différents sur le diagramme
df_focus <- data %>%
mutate(molecule_simp = ifelse(molecule_simp == "Problème", "Autres", molecule_simp)) %>%
count(molecule_simp, name = "somme") %>%
arrange(desc(somme)) %>%
mutate(molecule_simp = ifelse(row_number() > lim, "Autres", molecule_simp)) %>%
group_by(molecule_simp) %>%
summarise(somme = sum(somme), .groups = "drop") %>%
arrange(desc(somme)) %>%
mutate(
pourcent = somme / sum(somme) * 100,
categorie_label = paste0(molecule_simp, " (", round(pourcent, 1), "%)")
)
list_focus <- df_focus$molecule_simp
data_bimestre <- data %>%
mutate(
month = month(date),
bimestre = 1 + (month - 1) %/% 2,  # Diviser le mois pour obtenir un bimestre (1-2, 3-4, etc.)
date_bimestre = floor_date(date, "year") + months((bimestre - 1) * 2)  # Calculer le premier jour du bimestre
)
data_evol <- data_bimestre %>%
mutate(molecule_simp = ifelse(molecule_simp %in% list_focus,molecule_simp,"Autres")) %>%
group_by(date_bimestre) %>%
mutate(n_total = n()) %>%
ungroup() %>%
group_by(date_bimestre, molecule_simp) %>%
summarise(prop = n() / first(n_total), .groups = "drop") %>%
complete(date_bimestre, molecule_simp, fill = list(prop = 0)) %>%
arrange(date_bimestre, molecule_simp)
order=data_evol %>%
filter(date_bimestre==max(date_bimestre, na.rm=T)) %>%
mutate(temp=ifelse(molecule_simp=="Autres",-1,prop)) %>%
arrange(temp) %>%
select(molecule_simp)
data_evol <- data_evol %>%
mutate(molecule_simp = factor(molecule_simp, levels = unlist(order)))
N=nrow(data)
prod_vec=unique(data_evol$molecule_simp)
# Génération de la liste des datasets
datasets_list <- lapply(prod_vec, function(prod_i) {
list(
label = as.character(prod_i),
data = (data_evol %>% filter(molecule_simp == prod_i))$prop,
fill = as.character(prod_i)
)
})
# Objet JSON final
json_obj <- list(
labels = as.character(unique(data_evol$date_bimestre)),
datasets = datasets_list,
count = N
)
write_json(json_obj, "output/stacked_area_prop_all_molecules.json", pretty = TRUE, auto_unbox = FALSE)
#ggplot(data_evol, aes(x = date_bimestre, y = prop, fill = molecule_simp)) +
#  geom_area(position = "stack", color = "white", size = 0.2) +
#  scale_y_continuous(labels = scales::percent_format()) +
#  labs(
#    title = paste0("Évolution des parts par produit attendu, N=",N),
#    x = "Bimestre",
#    y = "Part relative",
#    fill = "Produit attendu"
#  ) +
#  theme_minimal(base_size = 14)
#ggsave("stacked_area_prop.pdf")
library(DBI)
library(RMySQL)
library(tidyverse)
library(jsonlite)
user <- Sys.getenv("USER")
pwd <- Sys.getenv("PASSWORD")
con <- dbConnect(RMySQL::MySQL(),
dbname = "db_psycho_test",
host = "localhost",
port = 3306,
user = user,
password = pwd)
dbListTables(con)
data <- dbReadTable(con, "resultats_analyse_cleaned")
dbDisconnect(con)
data = data %>% mutate(date=as.Date(date))
################################################################################
# Selection de la fenêtre de temps et des familles #############################
################################################################################
#args <- commandArgs(trailingOnly = TRUE)
#date_debut <- as.Date(args[1])
#date_fin <- as.Date(args[2])
#data = data %>%
#  filter(date>=date_debut & date<=date_fin)  # 2 dates NA à gérer
#if (length(args)>2){
#  familles_vec <- args[3:length(args)]  # vecteur de familles
#  data = data %>% filter(famille %in% familles_vec)
#}
################################################################################
# Évolution des pourcentages ###################################################
################################################################################
lim = 15 #nombre de produits différents sur le diagramme
df_focus <- data %>%
mutate(molecule_simp = ifelse(molecule_simp == "Problème", "Autres", molecule_simp)) %>%
count(molecule_simp, name = "somme") %>%
arrange(desc(somme)) %>%
mutate(molecule_simp = ifelse(row_number() > lim, "Autres", molecule_simp)) %>%
group_by(molecule_simp) %>%
summarise(somme = sum(somme), .groups = "drop") %>%
arrange(desc(somme)) %>%
mutate(
pourcent = somme / sum(somme) * 100,
categorie_label = paste0(molecule_simp, " (", round(pourcent, 1), "%)")
)
list_focus <- df_focus$molecule_simp
data_bimestre <- data %>%
mutate(
month = month(date),
bimestre = 1 + (month - 1) %/% 2,  # Diviser le mois pour obtenir un bimestre (1-2, 3-4, etc.)
date_bimestre = floor_date(date, "year") + months((bimestre - 1) * 2)  # Calculer le premier jour du bimestre
)
data_evol <- data_bimestre %>%
mutate(molecule_simp = ifelse(molecule_simp %in% list_focus,molecule_simp,"Autres")) %>%
group_by(date_bimestre) %>%
mutate(n_total = n()) %>%
ungroup() %>%
group_by(date_bimestre, molecule_simp) %>%
summarise(prop = n() / first(n_total), .groups = "drop") %>%
complete(date_bimestre, molecule_simp, fill = list(prop = 0)) %>%
arrange(date_bimestre, molecule_simp)
order=data_evol %>%
filter(date_bimestre==max(date_bimestre, na.rm=T)) %>%
mutate(temp=ifelse(molecule_simp=="Autres",-1,prop)) %>%
arrange(temp) %>%
select(molecule_simp)
data_evol <- data_evol %>%
mutate(molecule_simp = factor(molecule_simp, levels = unlist(order)))
N=nrow(data)
prod_vec=unique(data_evol$molecule_simp)
# Génération de la liste des datasets
datasets_list <- lapply(prod_vec, function(prod_i) {
list(
label = as.character(prod_i),
data = (data_evol %>% filter(molecule_simp == prod_i))$prop,
fill = TRUE
)
})
# Objet JSON final
json_obj <- list(
labels = as.character(unique(data_evol$date_bimestre)),
datasets = datasets_list,
count = N
)
write_json(json_obj, "output/stacked_area_prop_all_molecules.json", pretty = TRUE, auto_unbox = FALSE)
#ggplot(data_evol, aes(x = date_bimestre, y = prop, fill = molecule_simp)) +
#  geom_area(position = "stack", color = "white", size = 0.2) +
#  scale_y_continuous(labels = scales::percent_format()) +
#  labs(
#    title = paste0("Évolution des parts par produit attendu, N=",N),
#    x = "Bimestre",
#    y = "Part relative",
#    fill = "Produit attendu"
#  ) +
#  theme_minimal(base_size = 14)
#ggsave("stacked_area_prop.pdf")
